events {
    worker_connections 1024;
}

http {
    map $arg_auth $auth_header {
        ""      $http_authorization;
        default "Bearer $arg_auth";
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    upstream code_server {
        server 127.0.0.1:8080;
    }

    upstream dev_server {
        server 127.0.0.1:3000;
    }

    upstream mcp_server {
        server 0.0.0.0:8000;
    }

    upstream fallback_server {
        server 127.0.0.1;
    }

    server {
        listen 80;
        server_name _;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 90s;
        proxy_read_timeout 90s;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;
        proxy_set_header Authorization $auth_header;
        proxy_intercept_errors on;

        error_page 404 = @strip_fallback;

        location = /sse {
            proxy_pass http://mcp_server/mcp/;
        }

        location = /dashboard {
            proxy_pass http://mcp_server/dashboard;
        }

        location /8000/ {
            proxy_pass http://mcp_server/;
        }

        location /8080/${OAUTH_TOKEN}/ {
            proxy_pass http://code_server/;
        }

        location / {
            proxy_pass http://dev_server/;
        }

        error_page 401 = /_unauthorized;
        location = /_unauthorized {
            internal;
            add_header Content-Type application/json;
            return 401 '{"error":"unauthorized"}';
        }

        location @strip_fallback {
            if ($request_uri ~ ^/${FLY_MACHINE_ID}(/|$)) {
                return 404;
            }
            rewrite ^/[^/]+(.*)$ /$1 break;
            proxy_pass http://fallback_server;
        }
    }
}